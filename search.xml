<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>实用的在线网站</title>
      <link href="/posts/bc77.html"/>
      <url>/posts/bc77.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>不定时持续更新，如果你有好用的在线网站，欢迎来交流！如果网址失效，请及时联系我，我会及时进行相关的处理，谢谢您的支持！</strong></p></blockquote><h2 id="文档类"><a href="#文档类" class="headerlink" title="文档类"></a>文档类</h2><h3 id="1-轻松玩转PDF"><a href="#1-轻松玩转PDF" class="headerlink" title="1.  轻松玩转PDF"></a>1.  轻松玩转PDF</h3><p>官网： <a href="https://smallpdf.com/cn" target="_blank" rel="noopener">https://smallpdf.com/cn</a> </p><p>这个网站非常好用，提供了很多的实用功能，如PDF转换Word，PDF转换PPT，PDF编辑，PDF加密，Word转换PDF等等</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118222057.png" style="zoom:50%;"><h3 id="2-Convertio：在线的文件转换器"><a href="#2-Convertio：在线的文件转换器" class="headerlink" title="2. Convertio：在线的文件转换器"></a>2. Convertio：在线的文件转换器</h3><p>这个网站也提供在线免费的文件转换器，将文件转换为不同的格式，不注册的话也可以使用，限制最大文件的大小为<strong>100MB</strong>，超过这个文件大小的最大限制，需要进行注册，收费。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118223346.png" style="zoom:50%;"><h3 id="3-CleverPDF"><a href="#3-CleverPDF" class="headerlink" title="3. CleverPDF"></a>3. CleverPDF</h3><p>官网： <a href="https://www.cleverpdf.com/cn" target="_blank" rel="noopener">https://www.cleverpdf.com/cn</a> </p><p>27个强大的PDF在线工具，完全免费！而且还提供Windows客户端，不过在线的，客户点有一定的限制，网上也有破解的客户端，<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8">👉</span> <a href="https://pan.baidu.com/s/1_E6b42zhnEN3AAGGGEffxw" target="_blank" rel="noopener">传送门</a>(密钥：bigo)</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191121221824.png" style="zoom:50%;"><h3 id="4-vvv文档在线导出工具"><a href="#4-vvv文档在线导出工具" class="headerlink" title="4. vvv文档在线导出工具"></a>4. vvv文档在线导出工具</h3><p>官网： <a href="http://wenku.baiduvvv.com/doc/" target="_blank" rel="noopener">http://wenku.baiduvvv.com/doc/</a> </p><p>免费下载百度文库文档，支持 PDF 和 Word 格式。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118224216.png" style="zoom:50%;"> <h3 id="5-微信公众号格式化编辑器"><a href="#5-微信公众号格式化编辑器" class="headerlink" title="5. 微信公众号格式化编辑器"></a>5. 微信公众号格式化编辑器</h3><p>可以在线调整公众号文章的格式</p><p>官网： <a href="https://lab.lyric.im/wxformat/" target="_blank" rel="noopener">https://lab.lyric.im/wxformat/</a> </p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118224735.png" style="zoom:50%;"><h3 id="6-Process-On：免费在线作图，实时协作"><a href="#6-Process-On：免费在线作图，实时协作" class="headerlink" title="6. Process On：免费在线作图，实时协作"></a>6. Process On：免费在线作图，实时协作</h3><p>官网： <a href="https://www.processon.com/" target="_blank" rel="noopener">https://www.processon.com/</a> </p><p>Process On 支持流程图、思维导图、原型图、UML、网络拓扑图、组织结构图等，也支持小程序，很好用，还有模板可以借鉴。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118225035.png" style="zoom:50%;"><h3 id="7-ALL-TO-ALL（在线格式转换）"><a href="#7-ALL-TO-ALL（在线格式转换）" class="headerlink" title="7. ALL TO ALL（在线格式转换）"></a>7. ALL TO ALL（在线格式转换）</h3><p>官网： <a href="http://www.alltoall.net/" target="_blank" rel="noopener">http://www.alltoall.net/</a> </p><p>国内最全类型的在线文件转换平台，免费、快速，无须下载安装任何软件。支持文档、视频、压缩包、音频等文件类型格式的转换</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191121224541077.png" style="zoom: 50%;"><h3 id="8-Office-Converter"><a href="#8-Office-Converter" class="headerlink" title="8. Office-Converter"></a>8. Office-Converter</h3><p>官网： <a href="https://cn.office-converter.com/" target="_blank" rel="noopener">https://cn.office-converter.com/</a> </p><p>网站支持各种文件类型的转换，如音频、视频、压缩包等的转换，虽然免费，但对上传文件的大小有限制，所以文件大小不超过限制的话，还是很好用的！</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191121225255.png" style="zoom:50%;"><h3 id="9-Super-Tools（依奇在线超级转换工具）"><a href="#9-Super-Tools（依奇在线超级转换工具）" class="headerlink" title="9. Super Tools（依奇在线超级转换工具）"></a>9. Super Tools（依奇在线超级转换工具）</h3><p>官网： <a href="https://www.wdku.net/" target="_blank" rel="noopener">https://www.wdku.net/</a> </p><p>提供一些文档格式的转换，文字识别转换，在线图片，文档等</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191121225627.png" style="zoom:50%;"><h3 id="10-LightPDF"><a href="#10-LightPDF" class="headerlink" title="10. LightPDF"></a>10. LightPDF</h3><p>官网： <a href="https://lightpdf.com/zh/" target="_blank" rel="noopener">https://lightpdf.com/zh/</a> </p><p>从名称来看就是关于PDF文档处理的，PDF转PPT，PDF转Word，PDF编辑，加密等等，挺实用的，还提供客户端下载。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191121230156.png" style="zoom:50%;"><p><strong>小结：</strong></p><p>个人感觉吧，有些在线网站确实非常好用，完全免费，大大方便了人们的办公生活，但有些网站对一些功能，文件大小都有限制，如果要进行使用，需要进行购买付费，毕竟人家做这个多少还是要赚取利益的。如果是经常需要对文档进行处理的人们，我觉得还是付费比较好点，功能好用无限制，可能还有售后服务啥的<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>。当然网上也有破解的相关软件，百度一下，你就知道！<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>先就这样啦！</p><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="1-NICETOOL-：在线工具箱"><a href="#1-NICETOOL-：在线工具箱" class="headerlink" title="1. NICETOOL+：在线工具箱"></a>1. NICETOOL+：在线工具箱</h3><p>官网： <a href="http://www.nicetool.net/" target="_blank" rel="noopener">http://www.nicetool.net/</a> </p><p> NiceTool.net 好工具网致力于收集打造各种简单易用在线工具，网友无需注册和下载安装即可使用。 </p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118230437.png" style="zoom:50%;"><h3 id="2-Toolfk：在线工具箱"><a href="#2-Toolfk：在线工具箱" class="headerlink" title="2. Toolfk：在线工具箱"></a>2. Toolfk：在线工具箱</h3><p>官网： <a href="http://www.toolfk.com/" target="_blank" rel="noopener">http://www.toolfk.com/</a> </p><p>这是一个在线工具箱，一个为程序员服务并创建价值的在线工具转换网站 - 程序员的工具箱，里面有很多的实用小工具，比如：在线PDF转换图片，在线加密工具，在线Photoshop等等。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118225555.png" style="zoom:50%;"><h3 id="3-兔二工具"><a href="#3-兔二工具" class="headerlink" title="3. 兔二工具"></a>3. 兔二工具</h3><p>官网： <a href="https://www.tool2.cn/" target="_blank" rel="noopener">https://www.tool2.cn/</a> </p><p>这是一个工具集合网站，很强大，有很多的使用网站，对网站进行了分类，非常好用。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118232554.png" style="zoom:50%;"><h3 id="4-奇迹秀工具箱"><a href="#4-奇迹秀工具箱" class="headerlink" title="4. 奇迹秀工具箱"></a>4. 奇迹秀工具箱</h3><p>官网： <a href="http://www.qijishow.com/down/index.html" target="_blank" rel="noopener">http://www.qijishow.com/down/index.html</a> </p><p>提供一些好用的创意工具，效率工具，有在线的，也有客户端的。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118234323.png" style="zoom:50%;"><h3 id="5-SOOGIF：GIF制作工具"><a href="#5-SOOGIF：GIF制作工具" class="headerlink" title="5.  SOOGIF：GIF制作工具"></a>5.  SOOGIF：GIF制作工具</h3><p>官网： <a href="https://www.soogif.com" target="_blank" rel="noopener">https://www.soogif.com</a></p><p>在这个网站上可以搜到很多有趣的GIF动态图，比如表情包，Loading加载图等等，还可以制作GIF，非常好用！</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118222528.png" style="zoom:50%;"><h3 id="6-超级简历：在线制作简历"><a href="#6-超级简历：在线制作简历" class="headerlink" title="6.  超级简历：在线制作简历"></a>6.  超级简历：在线制作简历</h3><p>官网： <a href="https://www.wondercv.com/" target="_blank" rel="noopener">https://www.wondercv.com/</a> </p><p>在线制作简历，也有模板免费使用，有些模板好像是收费的，不过其他模板足足够用。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118223057.png" style="zoom:50%;"><h2 id="开发类"><a href="#开发类" class="headerlink" title="开发类"></a>开发类</h2><h3 id="1-在线颜色转换"><a href="#1-在线颜色转换" class="headerlink" title="1. 在线颜色转换"></a>1. 在线颜色转换</h3><p>官网： <a href="https://www.sioe.cn/yingyong/yanse-rgb-16/" target="_blank" rel="noopener">https://www.sioe.cn/yingyong/yanse-rgb-16/</a> </p><p>RGB颜色值与十六进制颜色码相互转换在线工具，还提供颜色对照表。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118230118.png" style="zoom:50%;"><h3 id="2-程序员导航"><a href="#2-程序员导航" class="headerlink" title="2. 程序员导航"></a>2. 程序员导航</h3><p>官网： <a href="http://code.giffox.com/" target="_blank" rel="noopener">http://code.giffox.com/</a> </p><p>整合了有关于程序员的实用工具，比如在线编程教程，程序员社区，开发工具，技术博客等。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118233955.png" style="zoom:50%;"><h3 id="3-JSON在线解析"><a href="#3-JSON在线解析" class="headerlink" title="3. JSON在线解析"></a>3. JSON在线解析</h3><p>官网： <a href="https://www.sojson.com/" target="_blank" rel="noopener">https://www.sojson.com/</a> </p><p>提供json数据的在线处理工具，如转换，格式化，压缩等，还提供在线加密解密数据，有关生活服务等功能。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191119134433.png" style="zoom:50%;"><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191119134542.png" style="zoom:50%;"><h3 id="4-在线工具"><a href="#4-在线工具" class="headerlink" title="4. 在线工具"></a>4. 在线工具</h3><p>官网： <a href="https://tool.lu/" target="_blank" rel="noopener">https://tool.lu/</a> </p><p>程序猿实用的在线网站，看图你就知道啦</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191121231241.png" style="zoom:67%;"><h2 id="在线图片处理"><a href="#在线图片处理" class="headerlink" title="在线图片处理"></a>在线图片处理</h2><h3 id="1-TinyPng（压缩图片）"><a href="#1-TinyPng（压缩图片）" class="headerlink" title="1. TinyPng（压缩图片）"></a>1. TinyPng（压缩图片）</h3><p>官网： <a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a> </p><p>在不超过它上传文件的最大限制（5MB），免费使用，进行图片压缩，最多不超过20张，可以免费打包下载。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191119145719.png" style="zoom:50%;"><h3 id="2-waifu2x（无损放大图片）"><a href="#2-waifu2x（无损放大图片）" class="headerlink" title="2.  waifu2x（无损放大图片）"></a>2.  waifu2x（无损放大图片）</h3><p>官网： <a href="http://waifu2x.udp.jp/" target="_blank" rel="noopener">http://waifu2x.udp.jp/</a> </p><p>使用卷积神经网络对动漫风格的图片进行放大操作（支持照片）</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118235127.png" style="zoom:50%;"> <h3 id="3-在线PS（稿定设计）"><a href="#3-在线PS（稿定设计）" class="headerlink" title="3. 在线PS（稿定设计）"></a>3. 在线PS（稿定设计）</h3><p>官网： <a href="https://www.uupoop.com/" target="_blank" rel="noopener">https://www.uupoop.com/</a> </p><p>在线Photoshop，也可以对照片进行编辑，制作手机端海报，公众号封面等等。好像需要用微信扫码进行登录，关注公众，即可进行免费下载。网址旗下还有在线抠图，很实用。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191119000102.png" style="zoom:50%;"><h2 id="免费素材库"><a href="#免费素材库" class="headerlink" title="免费素材库"></a>免费素材库</h2><h3 id="1-Pixabay（免费素材库）"><a href="#1-Pixabay（免费素材库）" class="headerlink" title="1. Pixabay（免费素材库）"></a>1. Pixabay（免费素材库）</h3><p>官网： <a href="https://pixabay.com/zh/photos/" target="_blank" rel="noopener">https://pixabay.com/zh/photos/</a> </p><p>正版高清素材库，有免费视频素材，照片素材，插画素材，矢量图素材，免费下载。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118235609.png" style="zoom:50%;"><h2 id="简洁的搜索导航"><a href="#简洁的搜索导航" class="headerlink" title="简洁的搜索导航"></a>简洁的搜索导航</h2><h3 id="1-某柠檬"><a href="#1-某柠檬" class="headerlink" title="1. 某柠檬"></a>1. 某柠檬</h3><p>官网： <a href="https://www.moulem.com/" target="_blank" rel="noopener">https://www.moulem.com/</a> </p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191119000446.png" alt=""></p><h3 id="2-秘迹搜索"><a href="#2-秘迹搜索" class="headerlink" title="2. 秘迹搜索"></a>2. 秘迹搜索</h3><p>官网： <a href="https://mijisou.com/" target="_blank" rel="noopener">https://mijisou.com/</a> </p><p>这个搜索引擎也提供APP客户端，<a href="https://www.leakzero.com/?from=search" target="_blank" rel="noopener">点我</a>进入官网进行下载。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191119000805.png" style="zoom: 67%;"><h2 id="导航整合"><a href="#导航整合" class="headerlink" title="导航整合"></a>导航整合</h2><h3 id="1-虫部落·快搜"><a href="#1-虫部落·快搜" class="headerlink" title="1. 虫部落·快搜"></a>1. 虫部落·快搜</h3><p>官网： <a href="https://search.chongbuluo.com/" target="_blank" rel="noopener">https://search.chongbuluo.com/</a> </p><p>整合了很多的好用的导航网站。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118233234.png" style="zoom:50%;"><h3 id="2-老司机导航（正规车）"><a href="#2-老司机导航（正规车）" class="headerlink" title="2. 老司机导航（正规车）"></a>2. 老司机导航（正规车）</h3><p>官网： <a href="https://www.giffox.com/" target="_blank" rel="noopener">https://www.giffox.com/</a> </p><p>看到<strong>老司机</strong>这几个字，别想太多了哦，整合了许多的导航网站。</p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118233518.png" style="zoom:50%;"><h4 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 实用工具集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript简介</title>
      <link href="/posts/9620.html"/>
      <url>/posts/9620.html</url>
      
        <content type="html"><![CDATA[<p>JavaScript是由Netscape公司开发的，最初的名字叫做Mocha，1995年9月改为LiveScript，当时的Java语言很流行，当年的12月，Netscape公司与Sun公司（Java语言的发明者和所有者）达成协议，允许Netscape将LiveScript改名为JavaScript，以此让JavaScript慢慢的流行起来。</p><p>随着JavaScript的发展，它自立门户，成为了一门独立的语言，同时也拥有了自己的语言规范——ECMAScript。现在它和Java之间没有啥关系了。</p><p>JavaScript是一种轻量级的，解释性的脚本语言，也可以称它为脚本语言。所谓的”脚本语言“（Script language），指的是它不具备开发操作系统的能力，而是只用来编写控制其他大型程序（比如浏览器）的”脚本”。脚本作为纯文本存在和执行，它们不需要特殊的准备或编译即可运行。</p><p>JavaScript也是一种嵌入式（embedded）语言，目前已经嵌入JavaScript的宿主环境有多种，最常见的环境就是浏览器，另外还有服务器环境，也就是 Node 项目。 甚至还能在任意搭载了 JavaScript 引擎 的设备中都可以执行。浏览器中嵌入了 JavaScript 引擎，有时也称作 JavaScript 虚拟机。从语法角度看，JavaScript 语言是一种“对象模型”语言。各种宿主环境通过这个模型，描述自己的功能和操作接口，从而通过 JavaScript 控制这些功能。但是，JavaScript 并不是纯粹的“面向对象语言”，还支持其他编程范式（比如函数式编程）。这导致几乎任何一个问题，JavaScript 都有多种解决方法。继续往后学JavaScript，你会诧异于 JavaScript 语法的灵活性。  </p><blockquote><p>引擎是如何工作的？</p></blockquote><p>引擎很复杂，但是基本原理很简单。</p><ol><li>引擎（通常嵌入在浏览器中）读取（“解析”）脚本。</li><li>然后将脚本转化（“编译”）为机器语言。</li><li>然后这机器语言代码快速地运行。</li></ol><p>引擎会对流程中的每个阶段都进行优化。它甚至可以在运行时监视编译的脚本，分析数据流并根据这些对机器代码应用优化。最后，脚本会执行地非常快。</p><p>现代的 JavaScript 是一种“安全”语言。它不提供对内存或 CPU 的底层访问，因为它最初是为浏览器创建的，不需要这些功能。</p><p>JavaScript 的能力很大程度上依赖于它执行的环境。例如：Node.js 允许 JavaScript 读写任意文件、执行网络请求等。</p><p>浏览器中的 JavaScript 可以做与网页操作、用户交互和 Web 服务器相关的所有事情。</p><p>例如，浏览器中的 JavaScript 可以完成下面这些事：</p><ul><li>在网页中插入新的 HTML，修改现有的网页内容和网页的样式。</li><li>响应用户的行为，响应鼠标的点击或移动、键盘的敲击。</li><li>向远程服务器发送网络请求，下载或上传文件（所谓 <a href="https://en.wikipedia.org/wiki/Ajax_(programming)" target="_blank" rel="noopener">AJAX</a> 和 <a href="https://en.wikipedia.org/wiki/Comet_(programming)" target="_blank" rel="noopener">COMET</a> 技术）。</li><li>获取或修改 cookie，向访问者提出问题、发送消息。</li><li>记住客户端的数据（本地存储）。</li></ul><p>但浏览器中的JavaScript并不是万能的，有些事情，JavaScript是做不了的，比如：网页中的 JavaScript 不能读、写、复制及执行用户磁盘上的文件或程序。它没有直接访问操作系统的功能。JavaScript 通过互联网可以轻松地和当前网页域名的服务器进行通讯。但是从其他网站/域名的服务器中获取数据的能力是受限的。尽管这可以实现，但是需要来自远程服务器的明确协议（在 HTTP 头中）。这也是为了用户的数据安全。 </p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191118214410.png" alt=""></p><p> 浏览器环境外的 JavaScript 一般没有这些限制。例如服务端的 JavaScript 就没有这些限制。现代浏览器还允许安装可能会要求扩展权限的插件或扩展。 </p><p><strong>JavaScript的与众不同之处</strong></p><p>这三点值得说一说</p><ul><li>和 HTML/CSS 完全的集成。</li><li>使用简单的工具完成简单的任务。</li><li>被所有的主流浏览器支持，并且默认开启。</li></ul><p><strong>比JavaScript更好的语言</strong></p><p>不同的人喜欢不同的功能，JavaScript 的语法也不能够满足所有人的需求。这是正常的，因为每个人的项目和需求都不一样。所以，最近出现了很多不同的语言，这些语言在浏览器中执行之前，都会被<strong>编译</strong>（转化）成 JavaScript。</p><p>现代化的工具使得编译速度非常快速且透明，实际上允许开发人员使用另一种语言编写代码并将其自动转换为 JavaScript。</p><p>这些编程语言的例子有：</p><ul><li><a href="http://coffeescript.org/" target="_blank" rel="noopener">CoffeeScript</a> 是 JavaScript 的语法糖，它语法简短，明确简洁。通常使用 Ruby 的人喜欢用。</li><li><a href="http://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a> 将注意力集中在增加严格的数据类型。这样就能简化开发，也能用于开发复杂的系统。TypeScript 是微软开发的。</li><li><a href="http://flow.org/" target="_blank" rel="noopener">Flow</a> 也添加了数据类型，但是以一种不同的方式。由 Facebook 开发。</li><li><a href="https://www.dartlang.org/" target="_blank" rel="noopener">Dart</a> 是一门独立的语言。它拥有自己的引擎用于在非浏览器环境中运行（如：手机应用），它也能被编译成 JavaScript 。由 Google 开发。</li></ul><p>还有很多其他的语言。当然，即使我们在使用这些语言，我们也需要知道 JavaScript。因为学习 JavaScript 可以让我们真正明白我们自己在做什么。</p><p> <strong>总结</strong></p><ul><li>JavaScript 最开始是为浏览器设计的一门语言，但是现在也被用于很多其他的环境。</li><li>现在，JavaScript 是一门在浏览器中使用最广、并且能够很好集成 HTML/CSS 的语言。</li><li>有很多其他的语言可以被编译成 JavaScript，这些语言还提供了更多的功能。最好还是了解一下这些语言，至少在掌握了 JavaScript 之后简单地看一下。</li></ul><blockquote><p>参考：</p><p><strong>现代JavaScript教程</strong>：<a href="https://zh.javascript.info/" target="_blank" rel="noopener">https://zh.javascript.info/</a>  </p><p><strong>网道的JavaScript教程</strong>： <a href="http://wangdoc.com/javascript/" target="_blank" rel="noopener">http://wangdoc.com/javascript/</a>        </p><p>这两个教程写的很不错，阔以看一看，学习一下！另外我在推荐一下<a href="https://www.liaoxuefeng.com/wiki/1022910821149312" target="_blank" rel="noopener">廖雪峰的JavaScript教程</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建博客(详细精讲版)</title>
      <link href="/posts/4ab2.html"/>
      <url>/posts/4ab2.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>你了解<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener" title="Hexo官网">Hexo</a>吗？ Hexo是一个静态博客框架，基于Node.js，将Markdown文章通过渲染引擎，生成一个静态网页，再结合Git命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 </p><p>几个月前偶然间了解到了Hexo这个静态博客网站，很适合那些喜欢写作的朋友们，最重要的是它是免费的，里面有许多的博客主题模板，这些主题都是一些很牛的大佬们开发的，而且设计的主题都很棒，让我很心动，心动不如行动，于是开始整理搭建属于自己的博客。直到今天，这中间经历了许多的坎坷荆棘​，我将我的博客搭建的流程分享出来，能为那些博客小石榴们提供一些帮助吧，如果有错的话，请给我留言，我会及时修改，废话不多说，直接上教程。</p><h2 id="博客环境搭建"><a href="#博客环境搭建" class="headerlink" title="博客环境搭建"></a>博客环境搭建</h2><blockquote><p>本文系统环境信息：Win10专业版，64位（10.0    版本18362）</p><p>Node.js：12.13.0         Git：2.24.0</p><p>修改配置文件要用到的软件（可选）：</p><ol><li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener" title="Vscode官网">Visual Studio Code</a>（适合有开发基础的程序员，非常好用）</li><li>Sublime Text3，可免费使用，<a href="https://pan.baidu.com/s/1uKA-aBHm_CsmJI5GolrV1Q" target="_blank" rel="noopener">百度网盘</a>（提取码：mh0y）</li><li><a href="https://notepad-plus-plus.org/downloads/" target="_blank" rel="noopener">NodePad++ </a>7.8.1（最新的，也可以在官网选择其他版本）</li></ol></blockquote><h3 id="下载Git和Node-js"><a href="#下载Git和Node-js" class="headerlink" title="下载Git和Node.js"></a>下载Git和Node.js</h3><h4 id="Node-js的安装与配置"><a href="#Node-js的安装与配置" class="headerlink" title="Node.js的安装与配置"></a>Node.js的安装与配置</h4><p>首先去<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener" title="Node.js下载">Node.js官网</a> 下载node.js的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/nodejs-0.png" alt="Node.js下载以及版本的选择"></p><p>下载好与电脑系统对应的安装程序后，开始安装流程：</p><ol><li>打开下载好的Node.js安装程序，点击Next，进行下一步的安装；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-1.png" alt=""></p><ol start="2"><li>将”I accept the terms in the License Agreement”前面的复选框勾选，同意安装协议，再点击Next，进行下一步操作；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-2.png" alt=""></p><ol start="3"><li>选择Node.js安装程序的安装位置，在这里我以”C:\Program Files\nodejs"为例，点击Next，进入下一步操作；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-3.png" alt=""></p><ol start="4"><li>选择安装的模块和功能，这里全部安装，并添加到系统环境变量 ，继续点击Next，进入下一步操作；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-4.png" alt=""></p><ol start="5"><li>这一步可以跳过，这个选项的意思是安装一些编译本地模块的工具，比如python，C/C++等，点击Next，进入下一步；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-5.png" alt=""></p><ol start="6"><li>点击”Install”，等待Node.js安装完成；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-6.png" alt=""></p><ol start="7"><li>当看到下图所显示的情况，Node.js就成功安装完毕。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-7.png" alt=""></p><ol start="8"><li>验证安装，并测试Node.js是否加入环境变量，当出现如下图的情况，Node.js安装大功告成。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-8.png" alt=""></p><p>如果执行<code>node -v</code>报错的话，那么手动将Node.js的安装路径添加到环境变量中，右击点击我的电脑 -&gt;属性 -&gt; 高级系统设置 -&gt; 环境变量，在系统变量下找到名为path的变量名，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117191107.png" alt=""></p><p>选中path，或者双击，然后将你node.js的安装路径放在path变量值的最后面，如果添加之前path值最后有 <font weight="bolder" color="red">英文的分号</font>，则直接将路径添加进去即可，如果没有，先添加分号，然后点击保存，回到桌面，打开cmd（Win+R），执行<code>node -v</code>，看是否成功。</p><ol start="9"><li>设置npm的镜像源：</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看npm的配置</span><span class="token function">npm</span> config list<span class="token comment" spellcheck="true"># 默认源</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npmjs.org<span class="token comment" spellcheck="true"># 临时改变镜像源</span><span class="token function">npm</span> --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span class="token comment" spellcheck="true"># 永久设置为淘宝镜像源</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span class="token comment" spellcheck="true"># 另一种方式，编辑 ~/.npmrc 加入下面内容</span>registry <span class="token operator">=</span> https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="10"><li>设置npm的内置路径——&gt;全局模块路径和缓存路径（<font weight="bolder" color="red"><em>可选</em></font>）</li></ol><p>如果不改变内置路径也可，除非你的C盘空间足够bigger，这一步可以略过，不改变的话，它的路径在：</p><blockquote><p>此处参考：<a href="https://blog.csdn.net/jianleking/article/details/79130667" target="_blank" rel="noopener">jyjin的node环境变量配置，npm环境变量配置</a></p></blockquote><ul><li>npm包全局目录：<code>C:/Users/[username]/AppData/Roaming/npm/node_modules</code> </li><li>npm包全局命令目录：<code>C:/Users/[username]/AppData/Roaming/npm</code> </li><li>npm实际去找全局命令的目录：<code>C:/Users/[username]/.npmrc</code> 文件内容的<code>prefix</code>值 </li><li>npm包全局cache目录：<code>C:/Users/[username]/.npmrc</code> 文件内容的<code>cache</code>值 </li></ul><p>首先在你Node.js的安装位置，新建两个文件夹，<code>node_global</code>和<code>node_cache</code>，我的路径是：</p><pre><code>C:\Program Files\nodejs\node_globalC:\Program Files\nodejs\node_cache</code></pre><p>然后分别执行的命令就是：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> prefix<span class="token string">"C:\Program Files\nodejs\node_global"</span><span class="token function">npm</span> config <span class="token keyword">set</span> cache <span class="token string">"C:\Program Files\nodejs\node_cache"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后在配置环境变量，右击我的电脑 -&gt;属性 -&gt; 高级系统设置 -&gt; 环境变量同样的位置，在用户变量的地方，找到path变量进行修改，修改值如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-11.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-12.png" alt=""></p><p>然后就大功告成了，Node.js就安装完毕了，下面开始Git安装。:point_down::point_down::point_down:</p><h4 id="Git的安装与配置"><a href="#Git的安装与配置" class="headerlink" title="Git的安装与配置"></a>Git的安装与配置</h4><p>首先就是去<a href="https://git-scm.com/" target="_blank" rel="noopener" title="Git官网">Git官网</a>下载Git，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117193737.png" alt=""></p><ol><li>下载好Git的安装包，开始安装，打开安装包，出现如图的界面，点击Next：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-1.png" alt=""></p><ol start="2"><li>选择你要安装的位置，我以C盘为例，路径为图中所示，安装到其他位置的话，点击Browse，选择你要安装的位置，然后点击Next，进入下一步：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-2.png" alt=""></p><ol start="3"><li>选择你是否创建桌面快捷放方式，其他默认即可，点击Next，进入下一步：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-3.png" alt=""></p><ol start="4"><li>是否将Git快捷方式的目录加入开是菜单栏</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-4.png" alt=""></p><ol start="5"><li>这个是选择文本编辑器的方式，默认是Vim，也可以选择其他的方式，自主选择，在这里我选择的Vim默认方式。选择好文本编辑器的方式后，点击Next，进入下一个流程：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-5.png" alt=""></p><ol start="6"><li>选择安装 Git 时对环境变量PATH的影响，第一种影响较小，第三种会影响到Windows的自带工具，默认勾选中间项，建议不要修改，直接点击 “Next” 继续安装：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-6.png" alt=""></p><ol start="7"><li>选择 Git 在使用 HTTPS 时使用的库，若无特殊需求，可保持默认选项，点击 “Next” 继续安装：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-7.png" alt=""></p><ol start="8"><li>选择提交与拉取记录时，对换行符的处理方式，若无特殊需要，默认选择即可，点击 “Next” 继续安装：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-8.png" alt=""></p><ol start="9"><li>选择模拟终端软件（即命令行窗口软件），若无特殊需要，可默认选择，点击 “Next” 继续安装：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-9.png" alt=""></p><ol start="10"><li>最新功能的询问，若不想尝试尚未保证稳定性的新功能，默认不勾选，点击 “Install” 即可完成安装：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-10.png" alt=""></p><ol start="11"><li>安装完成</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-11.png" alt=""></p><ol start="12"><li>回到桌面，点击鼠标右键，会出现两个选项<code>Git GUI Here</code>和<code>Git Bash Here</code>，在打开Cmd(Win+R)，分别输入<code>git</code>和<code>git --version</code>，如果出现如下图的情况，即安装成功！</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-12.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-13.png" alt=""></p><blockquote><p>参考： <a href="https://blog.csdn.net/sishen47k/article/details/80211002" target="_blank" rel="noopener">https://blog.csdn.net/sishen47k/article/details/80211002</a>  Git 中文详细安装教程</p><p> <a href="http://www.mamicode.com/info-detail-2736524.html" target="_blank" rel="noopener">http://www.mamicode.com/info-detail-2736524.html</a>   安装 Git for Windows</p></blockquote><h2 id="Github注册以及Github-Pages创建"><a href="#Github注册以及Github-Pages创建" class="headerlink" title="Github注册以及Github Pages创建"></a>Github注册以及Github Pages创建</h2><ol><li>打开Github<a href="https://github.com/" target="_blank" rel="noopener" title="GitHub官网">官网首页</a>，点击右上角的<strong>Sign Up</strong> ，然后在出现的页面上填写你的相关信息，进行注册：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117203432.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117204639.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117204955.png" alt=""></p><p>验证完成后，点击Next：Select a plan，会出现如上图的验证界面，同理，只需要将其中的动物调整为正向显示即可。接着会出现下图的界面，选择Free，下方的两个选项可选可不选，点击<strong>Continue</strong>继续：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117211431.png" alt=""></p><p>这时Github会给你发一封邮件，验证一下即可，验证过后才可以创建库。</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117212721.png" alt=""></p><p>验证完成后，开始创建库，如下图所示，仓库名创建格式必须为：<code>&lt;用户名&gt;.github.io</code>，<code>Description</code>为描述仓库，自定义写，填写必要的描述，也可不填。勾选<code>Initialize this repository with a README</code>点击<code>Creat repository</code>进行创建。 </p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117212538.png" alt=""></p><p>然后就会出现如图所示的界面，即仓库创建成功！</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117213321.png" alt=""> </p><p> 我们来测试一下，点击<code>Create new file</code>，出现如下界面，然后命名文件名为<code>index.html</code>，在填写如图的内容，再点击<code>Commit new file</code>，即创建成功，然后打开一个新的网页，输入网址<code>https://&lt;你的用户名&gt;.github.io</code>，即可以看见一个新的网页，其中的内容就是你写的内容。</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117214029.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117213957.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117214450.png" alt=""></p><p> 至此，Github的注册以及Github Pages已经创建完成了。 </p><h2 id="配置Git用户名和邮箱"><a href="#配置Git用户名和邮箱" class="headerlink" title="配置Git用户名和邮箱"></a>配置Git用户名和邮箱</h2><p>在桌面点击鼠标右键，点击<code>Git Bash Here</code>，会出现一个界面如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117215118.png" alt=""></p><p>然后分别输入下面的两个命令，并回车：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"此处填写你注册时的用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"此处填写你注册时的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后找到<code>.gitconfig</code>文件，文件存放位置在<code>C:/Users/[username]/.gitconfig</code>，用编辑器打开，看到如下图所示的内容，即配置成功！</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117220016.png" alt=""></p><h2 id="本地安装hexo静态博客框架以及发布到Github-Pages"><a href="#本地安装hexo静态博客框架以及发布到Github-Pages" class="headerlink" title="本地安装hexo静态博客框架以及发布到Github Pages"></a>本地安装hexo静态博客框架以及发布到Github Pages</h2><ol><li>首先选择一个磁盘作为你博客文件的存放位置，然后新建一个文件夹，比如名为blogtest的文件夹，创建完后，先不要点进去，在此处点击鼠标右键，选择<code>Git Bash Here</code>，然后依次输入如下命令，：</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># hexo框架的安装</span><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span class="token comment" spellcheck="true"># 等上一个命令完成后，在输入下面的命令</span>hexo init <span class="token operator">&lt;</span>新建文件夹的名称<span class="token operator">></span>  <span class="token comment" spellcheck="true">#初始化文件夹</span><span class="token function">cd</span> <span class="token operator">&lt;</span>新建文件夹的名称<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span>  <span class="token comment" spellcheck="true"># 安装博客所需要的依赖文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117221129.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117221144.png" alt=""></p><p>等待运行完成，此时文件夹中多了许多文件。<br><strong>注意</strong>：<strong>后续的命令均需要在站点目录下（即文件夹内）使用Git Bash运行。</strong><br>此时Hexo框架的本地搭建已经完成了。我们来运行一下看看，命令行依次输入以下命令 :</p><pre class="line-numbers language-bash"><code class="language-bash">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117221157.png" alt=""></p><p>浏览器中打开<a href="http://locakhost:4000或者127.0.0.1:4000，可以看到一个网页，说明Hexo博客已经成功在本地运行。" target="_blank" rel="noopener">http://locakhost:4000或者127.0.0.1:4000，可以看到一个网页，说明Hexo博客已经成功在本地运行。</a> </p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117221206.png" alt=""></p><blockquote><h3 id="本地博客发布到Github-Pages"><a href="#本地博客发布到Github-Pages" class="headerlink" title="本地博客发布到Github Pages"></a>本地博客发布到Github Pages</h3></blockquote><p>之前的步骤中，我们已经完成了对Github账户的注册以及Github Pages的创建，接下来是将本地博客发布至Github Pages。</p><ol><li>首先需要安装发布的插件，在站点目录下执行下面的命令，也就是创建的博客目录下：</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>紧接着，将本地目录与GitHub关联起来，输入下面的命令行：</li></ol><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的邮箱地址"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入后一直回车，然后在<code>C:/Users/[username]</code>目录下找到名为<code>.ssh</code>的文件夹， 文件夹内会有两个文件，一个<code>id_rsa.pub</code>一个<code>id_rsa</code>，用文本编辑器打开<code>id_rsa.pub</code>，复制里面的的内容。 然后打开Github，点击右上角的头像 <strong>Settings</strong> 选择<strong>SSH and GPG keys</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117222746.png" alt=""></p><p> 点击<strong>New SSH key</strong> 将之前复制的内容粘帖到Key的框中。 上面的<strong>Title</strong>可以随意，点击<strong>Add SSH key</strong> 完成添加。 </p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117223049.png" alt=""> </p><p>然后回到Git的命令行界面，测试一下是否与GitHub连接成功。输入下面的命令行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>点击回车，然后会出现一个询问内容，输入<code>yes</code>，回车，会出现一段内容，<code>Hi &lt;account name&gt;! You've successfully authenticated, but GitHub doesnot provide shell access.</code>。 说明连接成功。此处这个<code>&lt;account name&gt;</code>应该是你Github的用户名。</p><ol start="3"><li>进入博客站点目录，用文本编辑器打开<code>_config.yml</code>，这个<code>_config.yml</code>是博客的配置文件，在以后的博客修改，如个性化修改，博客SEO优化等都会使用到，修改如下图的几个地方：</li></ol><pre class="line-numbers language-yml"><code class="language-yml">title: 你的博客名subtitle: 博客的副标题，有些主题支持description: 博客描述keywords: 博客关键词author: 作者，在文章中显示language: 博客语种timezone: 时区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117224138.png" alt=""></p><p>滑到文件最底部，有一个deploy，在deploy下面添加一个repo项 ，一个branch项。填入如下代码，并如下图所示： </p><pre class="line-numbers language-yml"><code class="language-yml">type: gitrepo: git@github.com:<Github用户名>/<github用户名>.github.io.git            branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>也可以进行博客双部署，同时部署到Coding(或者码云)和Github上，我在后续的文章中发布</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117224151.png" alt=""></p><ol start="4"><li>最后就是生成页面，并发布至Github Pages，执行如下命令：</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Hexo会根据配置文件渲染出一套静态页面</span>hexo g<span class="token comment" spellcheck="true"># 将上一步渲染出的一系列文件上传至至Github Pages</span>hexo d<span class="token comment" spellcheck="true"># 也可以直接输入此命令，直接完成渲染和上传</span>hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传完成后，在浏览器中打开<strong>https://&lt;用户名&gt;.github.io</strong>，查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传以及完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话清除一下浏览器缓存试试。 </p><h2 id="hexo博客主题安装以及一些个性化修改"><a href="#hexo博客主题安装以及一些个性化修改" class="headerlink" title="hexo博客主题安装以及一些个性化修改"></a>hexo博客主题安装以及一些个性化修改</h2><hr><p>未完待续。。。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3弹性盒子</title>
      <link href="/posts/724a.html"/>
      <url>/posts/724a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>弹性盒模型的一些知识</p></blockquote><h2 id="一、简单介绍"><a href="#一、简单介绍" class="headerlink" title="一、简单介绍"></a>一、简单介绍</h2><p>  弹性盒模型（ Flexible Box或FlexBox）是一个CSS3新增布局模块，官方称为CSS Flexible Box Layout Module，用于实现容器里项目的对齐、方向、排序（即使在项目大小位置、动态生成的情况）, 分配空白空间 。弹性盒模型最大的特性在于，能够动态修改子元素的宽度和高度，以满足在不同尺寸屏幕下的恰当布局。</p><h2 id="二、基本知识"><a href="#二、基本知识" class="headerlink" title="二、基本知识"></a>二、基本知识</h2><p>  弹性盒子是由弹性容器（flex container）和弹性子元素（flex item）组成，弹性盒子有一个主轴（main axis）和一个纵轴（cross axis），弹性子元素沿着主轴依次排列 ，侧轴垂直于主轴。弹性容器的主轴开始（main start）、主轴结束（main end）和侧轴开始（cross start）、侧轴结束（cross end）代表了弹性子元素排列的起始和结束位置。具体可以看下面的图。</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://raw.githubusercontent.com/Yafine/Yafine-imgs/master/images/flexbox.png" alt="弹性盒子组成示意图"></p><h2 id="三、属性分类"><a href="#三、属性分类" class="headerlink" title="三、属性分类"></a>三、属性分类</h2><h3 id="1-弹性容器的相关属性"><a href="#1-弹性容器的相关属性" class="headerlink" title="1. 弹性容器的相关属性"></a>1. 弹性容器的相关属性</h3><table><thead><tr><th align="center">属性</th><th align="left">属性说明</th></tr></thead><tbody><tr><td align="center">flex-direction</td><td align="left">设置主轴方向，确定弹性子元素的排列方式</td></tr><tr><td align="center">flex-wrap</td><td align="left">当弹性子元素超出弹性容器范围时是否换行</td></tr><tr><td align="center">flex-flow</td><td align="left">flex-direction和flex-wrap的快捷方式，复合属性</td></tr><tr><td align="center">justify-content</td><td align="left">设置弹性子元素主轴上的对齐方式</td></tr><tr><td align="center">align-items</td><td align="left">设置弹性子元素侧轴上的对齐方式</td></tr><tr><td align="center">align-content</td><td align="left">侧轴上有空白时且有多行时，设置弹性子元素侧轴的对齐方式</td></tr></tbody></table><h4 id="a-flex-direction属性"><a href="#a-flex-direction属性" class="headerlink" title="a. flex-direction属性"></a>a. flex-direction属性</h4><blockquote><p>使用方法：<code>flex-direction:row |row-reverse |column |column-reverse</code></p></blockquote><table><thead><tr><th align="center">属性值</th><th>含义</th></tr></thead><tbody><tr><td align="center">row（默认值）</td><td>主轴为水平方向。排序方向与页面的文档顺序相同。如果文档顺序是ltr，则排列顺序是从左到右；如果文档顺序是rtl，则排列顺序是从右到左。</td></tr><tr><td align="center">row-reverse</td><td>主轴为水平方向。排序方向与页面的文档顺序相反。</td></tr><tr><td align="center">column</td><td>主轴为垂直方向。排列顺序为从上到下</td></tr><tr><td align="center">column-reverse</td><td>主轴为垂直方向。排列顺序为从下到上</td></tr></tbody></table><p>其属性的效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://raw.githubusercontent.com/Yafine/Yafine-imgs/master/images/flex-direction%E5%B1%9E%E6%80%A7%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="flex-direction属性效果图"></p><h4 id="b-flex-wrap属性"><a href="#b-flex-wrap属性" class="headerlink" title="b. flex-wrap属性"></a>b. flex-wrap属性</h4><blockquote><p>使用方法：flex-wrap: nowrap | wrap | wrap-reverse    </p></blockquote><table><thead><tr><th align="center">属性值</th><th>含义</th></tr></thead><tbody><tr><td align="center">nowrap（默认值）</td><td>溢出时不换行</td></tr><tr><td align="center">wrap</td><td>溢出时自动换行</td></tr><tr><td align="center">wrap-reverse</td><td>溢出时自动换行，翻转排列</td></tr></tbody></table><p>其效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://raw.githubusercontent.com/Yafine/Yafine-imgs/master/images/flex-wrap%E5%B1%9E%E6%80%A7%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="flex-wrap属性效果图"></p><h4 id="c-flex-flow属性"><a href="#c-flex-flow属性" class="headerlink" title="c. flex-flow属性"></a>c. flex-flow属性</h4><blockquote><p>使用方法：flex-flow: [flex-direction] || [flex-wrap]</p><p>含义：复合属性（flex-direction和flex-wrap），设置弹性子元素的排列方式</p></blockquote><h4 id="d-justify-content属性"><a href="#d-justify-content属性" class="headerlink" title="d. justify-content属性"></a>d. justify-content属性</h4><blockquote><p>使用方法：justify-content: flex-start | flex-end | center | space-between | space-around</p></blockquote><table><thead><tr><th align="center">属性值</th><th>含义</th></tr></thead><tbody><tr><td align="center">flex-start（默认值）</td><td>主轴开始对齐，主轴为横轴，ltr环境下，左对齐</td></tr><tr><td align="center">flex-end</td><td>主轴结束对齐，主轴为横轴，ltr环境下，右对齐</td></tr><tr><td align="center">center</td><td>居中对齐</td></tr><tr><td align="center">space-between</td><td>第一个、最后一个对齐弹性容器的边缘，其余均匀分布</td></tr><tr><td align="center">space-around</td><td>全部均匀分布</td></tr></tbody></table><p>其效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://raw.githubusercontent.com/Yafine/Yafine-imgs/master/images/justify-content%E5%B1%9E%E6%80%A7%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="justify-content属性效果图">  </p><h4 id="e-align-items属性"><a href="#e-align-items属性" class="headerlink" title="e. align-items属性"></a>e. align-items属性</h4><blockquote><p>使用方法：align-items: flex-start | flex-end | center | baseline | stretch</p></blockquote><table><thead><tr><th align="center">属性值</th><th>含义</th></tr></thead><tbody><tr><td align="center">flex-start</td><td>侧轴开始对齐，主轴为横轴，顶对齐</td></tr><tr><td align="center">flex-end</td><td>侧轴结束对齐</td></tr><tr><td align="center">center</td><td>居中对齐</td></tr><tr><td align="center">baseline</td><td>基线对齐</td></tr><tr><td align="center">stretch（默认值）</td><td>从侧轴开始到侧轴结束铺满整个侧轴</td></tr></tbody></table><p>其效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://raw.githubusercontent.com/Yafine/Yafine-imgs/master/images/align-items%E5%B1%9E%E6%80%A7%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="align-items属性效果图"></p><h4 id="f-align-content属性"><a href="#f-align-content属性" class="headerlink" title="f. align-content属性"></a>f. align-content属性</h4><blockquote><p>使用方法：align-content: flex-start | flex-end | center | space-between | space-around | stretch</p></blockquote><table><thead><tr><th align="center">属性值</th><th>含义</th></tr></thead><tbody><tr><td align="center">flex-start</td><td>主轴开始对齐，主轴为横轴，ltr环境下，左对齐</td></tr><tr><td align="center">flex-end</td><td>主轴结束对齐，主轴为横轴，ltr环境下，右对齐</td></tr><tr><td align="center">center</td><td>居中对齐</td></tr><tr><td align="center">space-between</td><td>第一个、最后一个对齐弹性容器的边缘，其余均匀分布</td></tr><tr><td align="center">space-around</td><td>全部均匀分布</td></tr><tr><td align="center">stretch（默认值）</td><td>各行伸展以占用剩余空间。如果剩余空间是负数，该值等效于flex-start</td></tr></tbody></table><p>其效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://raw.githubusercontent.com/Yafine/Yafine-imgs/master/images/align-content%E5%B1%9E%E6%80%A7%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="align-content属性效果图"></p><h3 id="2-弹性子元素的相关属性"><a href="#2-弹性子元素的相关属性" class="headerlink" title="2. 弹性子元素的相关属性"></a>2. 弹性子元素的相关属性</h3><table><thead><tr><th align="center">属性值</th><th>含义</th></tr></thead><tbody><tr><td align="center">order</td><td>控制弹性容器里子元素的顺序，数值小的排在前面，可以为负值</td></tr><tr><td align="center">flex-grow</td><td>设置弹性子元素的扩展比率</td></tr><tr><td align="center">flex-shrink</td><td>设置弹性子元素的收缩比率</td></tr><tr><td align="center">flex-basis</td><td>指定弹性子元素伸缩前的默认大小值，相当于width和height属性</td></tr><tr><td align="center">flex</td><td>flex-grow，flex-shrink和flex-basis属性的复合属性</td></tr><tr><td align="center">align-self</td><td>允许独立的弹性子元素覆盖弹性容器的默认对齐设置（align-items）</td></tr></tbody></table><h4 id="a-order属性"><a href="#a-order属性" class="headerlink" title="a. order属性"></a>a. order属性</h4><blockquote><p>使用方法：order: integer number</p></blockquote><p>其属性效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://raw.githubusercontent.com/Yafine/Yafine-imgs/master/images/order%E5%B1%9E%E6%80%A7%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="order属性效果图"></p><h4 id="b-flex-grow属性"><a href="#b-flex-grow属性" class="headerlink" title="b. flex-grow属性"></a>b. flex-grow属性</h4><blockquote><p>使用方法：flex-grow: number</p><p>含义：设置弹性子元素的扩展比率，不允许为负值，默认值为0。根据弹性盒子元素所设置的扩展因子作为比率来分配剩余空间。</p></blockquote><p>其属性效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://raw.githubusercontent.com/Yafine/Yafine-imgs/master/images/flex-grow%E5%B1%9E%E6%80%A7%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="flex-grow属性效果图"></p><h4 id="c-flex-shrink属性"><a href="#c-flex-shrink属性" class="headerlink" title="c. flex-shrink属性"></a>c. flex-shrink属性</h4><blockquote><p>使用方法：flex-shrink: number</p><p>含义：设置弹性子元素的收缩比率，不允许为负值，默认值为1。根据弹性盒子元素所设置的扩展因子作为比率来收缩空间。</p></blockquote><p>其属性效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://raw.githubusercontent.com/Yafine/Yafine-imgs/master/images/flex-shrink%E5%B1%9E%E6%80%A7%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="flex-shrink属性效果图"></p><h4 id="d-flex-basis属性"><a href="#d-flex-basis属性" class="headerlink" title="d. flex-basis属性"></a>d. flex-basis属性</h4><blockquote><p>使用方法：flex-basis: <length> | <percentage> | auto</percentage></length></p><p>含义：设置弹性子元素的伸缩基准值，不允许为负值。默认值为auto，无特定宽度（高度）。</p></blockquote><h4 id="e-flex属性"><a href="#e-flex属性" class="headerlink" title="e. flex属性"></a>e. flex属性</h4><blockquote><p>使用方法：flex: none | [flex-grow] || [flex-shrink] || [flex-basis</p><p>含义：复合属性，设置弹性子元素的如何分配空间</p></blockquote><h4 id="f-align-self属性"><a href="#f-align-self属性" class="headerlink" title="f. align-self属性"></a>f. align-self属性</h4><blockquote><p>使用方法：auto | flex-start | flex-end | center | baseline | stretch</p><p>含义：设置弹性子元素的在侧轴上的对齐方式，与align-items相同。设置某个弹性子元素的对立对齐方式。</p></blockquote><p>其属性效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://raw.githubusercontent.com/Yafine/Yafine-imgs/master/images/align-self%E5%B1%9E%E6%80%A7%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="align-self属性效果图"></p><h3 id="3-多列属性详解"><a href="#3-多列属性详解" class="headerlink" title="3. 多列属性详解"></a>3. 多列属性详解</h3><h4 id="1）基础知识"><a href="#1）基础知识" class="headerlink" title="1）基础知识"></a>1）基础知识</h4><p>  多列（Multi-column）是一个CSS3新增布局模块，官方称为Multiple column layout，可以比较轻松的实现多列布局，比如图片瀑布流。</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://raw.githubusercontent.com/Yafine/Yafine-imgs/master/images/%E5%9B%BE%E7%89%87%E7%80%91%E5%B8%83%E6%B5%81.png" alt="图片瀑布流"> </p><h4 id="2）属性一览"><a href="#2）属性一览" class="headerlink" title="2）属性一览"></a>2）属性一览</h4><table><thead><tr><th align="center">属性</th><th>属性说明</th></tr></thead><tbody><tr><td align="center">columns</td><td>复合属性（column-width和column-count），设置宽度和列数</td></tr><tr><td align="center">column-width</td><td>设置每列的宽度</td></tr><tr><td align="center">column-count</td><td>设置列数</td></tr><tr><td align="center">column-gap</td><td>设置列之间的间隙</td></tr><tr><td align="center">column-rule</td><td>复合属性（column-rule-width、column-rule-style和column-rule-color），设置列之间的边框样式</td></tr><tr><td align="center">column-fill</td><td>设置列的高度是否统一</td></tr><tr><td align="center">column-span</td><td>设置是否横跨所有列</td></tr></tbody></table><h5 id="a-column-width属性"><a href="#a-column-width属性" class="headerlink" title="a. column-width属性"></a>a. column-width属性</h5><blockquote><p>使用方法：column-width: length | auto</p></blockquote><table><thead><tr><th align="center">属性值</th><th>含义</th></tr></thead><tbody><tr><td align="center">auto（默认值）</td><td>浏览器决定列的宽度</td></tr><tr><td align="center">length</td><td>用长度值来定义列宽。不允许负值</td></tr></tbody></table><h5 id="b-column-count属性"><a href="#b-column-count属性" class="headerlink" title="b. column-count属性"></a>b. column-count属性</h5><blockquote><p>使用方法： column-count: integer number | auto</p></blockquote><table><thead><tr><th align="center">属性值</th><th>含义</th></tr></thead><tbody><tr><td align="center">auto（默认值）</td><td>列数将取决于其他属性，例如：”column-width”</td></tr><tr><td align="center">imteger number</td><td>用整数值来定义列数，列的最佳数目将其中的元素的内容无法流出。</td></tr></tbody></table><h5 id="c-columns属性"><a href="#c-columns属性" class="headerlink" title="c. columns属性"></a>c. columns属性</h5><blockquote><p>使用方法：columns: [column-width]｜[column-count]</p><p>含义：复合属性设置列的宽度和个数</p></blockquote><h5 id="d-column-gap属性"><a href="#d-column-gap属性" class="headerlink" title="d. column-gap属性"></a>d. column-gap属性</h5><blockquote><p>使用方法：column-gap: length | normal</p></blockquote><table><thead><tr><th align="center">属性值</th><th>含义</th></tr></thead><tbody><tr><td align="center">normal（默认值）</td><td>与font-size大小相同。假设该对象的font-size为16px，则normal的值为16px，以此类推。</td></tr><tr><td align="center">length</td><td>用长度来定义列与列之间的间隙。不允许为负值。</td></tr></tbody></table><h5 id="e-column-rule属性"><a href="#e-column-rule属性" class="headerlink" title="e. column-rule属性"></a>e. column-rule属性</h5><blockquote><p>使用方法：column-rule: [column-rule-width] || [column-rule-style] || [column-rule-color]</p><p>含义：设置列与列之间的边框，和border属性相似</p></blockquote><table><thead><tr><th align="center">属性值</th><th>含义</th></tr></thead><tbody><tr><td align="center">column-rule-width</td><td>设置列与列之间的边框的厚度</td></tr><tr><td align="center">column-rule-style</td><td>设置列与列之间的边框的样式</td></tr><tr><td align="center">column-rule-color</td><td>设置列与列之间的边框的颜色</td></tr></tbody></table><h5 id="f-column-fill属性"><a href="#f-column-fill属性" class="headerlink" title="f. column-fill属性"></a>f. column-fill属性</h5><blockquote><p>使用方法：column-fill: auto | balance</p><p>含义：设置所有列的高度是否统一</p></blockquote><table><thead><tr><th align="center">属性值</th><th>含义</th></tr></thead><tbody><tr><td align="center">auto（默认值）</td><td>列高度自适应内容</td></tr><tr><td align="center">balance</td><td>所有列的高度以其中最高的一列统一</td></tr></tbody></table><h5 id="g-column-span属性"><a href="#g-column-span属性" class="headerlink" title="g. column-span属性"></a>g. column-span属性</h5><blockquote><p>使用方法：column-span: none | all</p><p>含义：对象元素是否横跨所有列</p></blockquote><table><thead><tr><th align="center">属性值</th><th>含义</th></tr></thead><tbody><tr><td align="center">none（默认值）</td><td>不跨列</td></tr><tr><td align="center">all</td><td>横跨所有列</td></tr></tbody></table><p>CSS3弹性盒子的基本知识就是这些了，如果有错的话，我会及时更改的！这篇文章就到此结束了，<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png?v8">👋</span><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png?v8">👋</span><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png?v8">👋</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
          <category> CSS3 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础知识总结</title>
      <link href="/posts/7aedb564.html"/>
      <url>/posts/7aedb564.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、HTML的历史"><a href="#一、HTML的历史" class="headerlink" title="一、HTML的历史"></a>一、HTML的历史</h3><p>  HTML,超文本标记语言，英文全称是Hyper Text Markup Language，由Tim Berners-Lee在1982年提出，它是互联网上应用最广泛的标记语言。</p><h4 id="1-HTML发展过程"><a href="#1-HTML发展过程" class="headerlink" title="1. HTML发展过程"></a>1. HTML发展过程</h4><ul><li>HTML（第一版）：1993年6月由互联网工程工作小组IETF(Interenet Engineering Task Force)发布的HTML工作草案。</li><li>HTML2.0 ：1995年11月作为RFC 1886发布，在RFC 2854于2000年6月发布之后被宣布已经过时。</li><li>HTML3..2 ：1996年1月14日由W3C组织发布，是HTML文档第一个被广泛使用的标准。</li><li>HTML4.0 ： 1997年12月18日由W3C组织发布，也是W3C推荐标准。</li><li>HTML4.01（微小改进）：1997年12月24日由W3C组织发布，是HTML文档另一个重要的、广泛使用的标准。</li><li>XHTML1.0 ：发布于2000年1月26日，是W3C组织推荐标准，后来经过修订于2002年8月1日重新发布。</li></ul><p>  在HTML的发展历史中，最为广为人知的是HTML3.2和HTML4.01。</p><h4 id="2-HTML4-01和XHTML"><a href="#2-HTML4-01和XHTML" class="headerlink" title="2. HTML4.01和XHTML"></a>2. HTML4.01和XHTML</h4><p>  XHTML的全称是(eXtensible Hyper Text Markup Language，扩展的超文本标记语言)，XHTML和HTML4.01具有很好的兼容性，而且XHTML是更严格、更纯净的HTML代码。W3C组织制定XHTML，目标是逐步取代原有的HTML。简单地说，XHTML就是最新版本的HTML规范。</p><p>  XHTML要求HTML文档首先必须是一份XML文档。XML文档是一种结构化文档，它有如下4条基本规则：</p><ul><li>整个文档有且有一个根元素。</li><li>每个元素都由开始标签和结束标签组成，例如<code>&lt;a&gt;&lt;/a&gt;</code>，就是一对标签。除非使用空元素语法，例如<code>&lt;br/&gt;</code>就是空元素语法。</li><li>元素与元素之间应该合理嵌套。例如<code>&lt;div&gt;&lt;span&gt;疯狂&lt;/span&gt;&lt;/div&gt;</code>，这可以明确的看出<code>&lt;/span&gt;</code>元素是<code>&lt;/div&gt;</code>的子元素，这就是合理嵌套。但<code>&lt;div&gt;&lt;span&gt;疯狂&lt;/div&gt;&lt;/span&gt;</code>这种写法就比较混乱，也就是所谓的不合理嵌套。</li><li>元素的属性必须有属性值，而且属性值应该用引号（单引号和双引号都可以）引起来。</li></ul><h4 id="3-HTML5的诞生"><a href="#3-HTML5的诞生" class="headerlink" title="3. HTML5的诞生"></a>3. HTML5的诞生</h4><p>  HTML5是指万维网的核心语言、标准通用标记语言下的一个应用超文本标记语言的第五次重大修改。HTML5的设计目的是为了在移动设备上支持多媒体。新的语法特征被引进以支持这一点，如video、audio和canvas标记。还引进了新的功能，可以真正改变用户与文档的交互方式。</p><p>  HTML5草案的前身名为Web Application 1.0，于2004年被WHATWG提出，于2007年被W3C接纳，并成立了新的HTML工作团队。</p><p>  HTML5的第一份正式草案已于2008年1月22日公布。HTML5仍处于完善之中。2013年5月6日，HTML5.1正式草案公布。该规范定义了第五次重大版本，第一次要修订万维网的核心语言：超文本标记语言。在这个版本中，新功能不断推出，以帮助Web应用程序的作者，努力提高新元素互操作性。直到2014年10月29日，经过几乎8年的艰辛努力，HTML5标准规范终于制定完成了，并已公开发布。</p><p>  HTML5还在继续修改完善，增加新的功能，未来前景很广。</p><h3 id="二、常用的标签"><a href="#二、常用的标签" class="headerlink" title="二、常用的标签"></a>二、常用的标签</h3><blockquote><p>这里我主要列举的是HTML的常用标签，HTML5的后面我会在写一篇文章单独介绍。</p></blockquote><h4 id="1-基本标签"><a href="#1-基本标签" class="headerlink" title="1. 基本标签"></a>1. 基本标签</h4><p>一个网页的大致构成是：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 优先使用最新的ie版本 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>文档标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>资源所在路径<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>规定被链接文档的MIME类型<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>定义编码方式<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--主体内容 显示在网页上的，由许多的标签组成--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>     ...   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>引用文件地址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--自己写的JavaScript代码，可在当前页面写，也可以另外写一个js文件，然后在引入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>&lt;!DOCTYPE HTML&gt;</code> 定义文档类型为HTML，自从HTML5问世之后，就开始使用。这个在编写代码时必须要写上，这个是用来声明文档类型的，文档类型类似于连接，规定了HTML页面必须遵从的良好规则，能自动检测错误和其他有用的东西</li><li><code>&lt;head&gt;&lt;/head&gt;</code>定义文档的一些相关信息</li><li><code>&lt;title&gt;&lt;/title&gt;</code>定义文档的标题</li><li><code>&lt;meta&gt;</code> 定义关于 HTML 文档的元信息，比如对页面进行描述，关键词，作者等。不会显示在网页上。它的属性有charset，name，http-equiv，content属性等，后期再对这个标签进行详细的解释</li><li><code>&lt;link&gt;</code>用于链接样式表，定义文档与外部资源的关系。关于什么是MIME类型，可以参考<a href="http://www.w3school.com.cn/media/media_mimeref.asp" target="_blank" rel="noopener" title="MIME类型参考手册">MIME类型参考手册</a>，有具体的讲解</li><li><code>&lt;!-- --&gt;</code>定义注释，注明一些信息，便于开发者阅读浏览</li><li><code>&lt;h1&gt;~&lt;h6&gt;</code>定义标题，字体的大小<code>&lt;h1&gt;</code>最大<code>，&lt;h6&gt;</code>最小</li><li><code>&lt;p&gt;&lt;/p&gt;</code>段落标签，是一个块级标签</li><li><code>&lt;span&gt;&lt;/span&gt;</code>和<code>&lt;div&gt;&lt;/div&gt;</code>定义文档的节</li><li><code>&lt;iframe&gt;&lt;/iframe&gt;</code>定义文档的内联框架</li></ul><h4 id="2-表格标签"><a href="#2-表格标签" class="headerlink" title="2. 表格标签"></a>2. 表格标签</h4><ul><li><code>&lt;table&gt;&lt;/table&gt;</code>定义表格</li><li><code>&lt;th&gt;&lt;/th&gt;</code>定义表格的表头</li><li><code>&lt;tr&gt;&lt;/tr&gt;</code>定义表格的行</li><li><code>&lt;td&gt;&lt;/td&gt;</code>定义表格的单元</li><li><code>&lt;caption&gt;&lt;/caption&gt;</code> 定义表格标题</li><li><code>&lt;thead&gt;&lt;thead&gt;</code>定义表格中的表头内容</li><li><code>&lt;tbody&gt;&lt;/tbody&gt;</code> 定义表格中的主体内容</li><li><code>&lt;tfoot&gt;&lt;/tfood&gt;</code> 定义表格中的表注内容（脚注）</li></ul><h4 id="3-列表标签"><a href="#3-列表标签" class="headerlink" title="3. 列表标签"></a>3. 列表标签</h4><ul><li><code>&lt;ul&gt;&lt;/ul&gt;</code>定义无序列表</li><li><code>&lt;ol&gt;&lt;/ol&gt;</code>定义有序列表</li><li><code>&lt;li&gt;&lt;/li&gt;</code>定义列表项</li><li><code>&lt;dl&gt;&lt;/dl&gt;</code> 定义列表 </li><li><code>&lt;dt&gt;&lt;/dt&gt;</code> 自定义列表项目 </li><li><code>&lt;dd&gt;&lt;/dd&gt;</code> 定义自定义列表的描述 </li></ul><h4 id="4-表单标签"><a href="#4-表单标签" class="headerlink" title="4. 表单标签"></a>4. 表单标签</h4><ul><li><code>&lt;form&gt;&lt;/form&gt;</code> 定义供用户输入的表单 </li><li><code>&lt;input&gt;</code> 定义输入控件，如密码框，输入框，按钮等</li><li><code>&lt;textarea&gt;&lt;/textarea&gt;</code> 定义文本域 （一个多行的输入控件）</li><li><code>&lt;label&gt;&lt;/label&gt;</code> 定义了 <code>&lt;input&gt;</code> 元素的标签，一般为输入标题 </li><li><code>&lt;filedset&gt;&lt;/filedset&gt;</code> 定义了一组相关的表单元素，并使用外框包含起来 </li><li><code>&lt;legend&gt;&lt;/legend&gt;</code> 定义了 <code>&lt;fieldset&gt;</code>元素的标题 </li><li><code>&lt;select&gt;&lt;/select&gt;</code> 定义了下拉选项列表 </li><li><code>&lt;optgroup&gt;&lt;/optgroup&gt;</code> 定义了下拉选项组</li><li><code>&lt;option&gt;&lt;/option&gt;</code>  定义下拉列表中的选项 </li><li><code>&lt;button&gt;&lt;/button&gt;</code>定义一个点击按钮</li></ul><h4 id="5-多媒体链接"><a href="#5-多媒体链接" class="headerlink" title="5. 多媒体链接"></a>5. 多媒体链接</h4><ul><li><code>&lt;a&gt;&lt;/a&gt;</code>定义一个超链接</li><li><code>&lt;img&gt;</code>定义图像</li><li><code>&lt;embed&gt;&lt;/embed&gt;</code> 定义在页面中嵌入的内容，可插入音频视频等。</li></ul><h4 id="6-格式标签"><a href="#6-格式标签" class="headerlink" title="6. 格式标签"></a>6. 格式标签</h4><ul><li><code>&lt;b&gt;&lt;b/&gt;</code>定义粗体文本</li><li><code>&lt;del&gt;&lt;/del&gt;</code>定义被删除文本</li><li><code>&lt;em&gt;&lt;/em&gt;</code>定义强调文本</li><li><code>&lt;i&gt;&lt;/i&gt;</code>定义斜体文本</li><li><code>&lt;sup&gt;&lt;/sup&gt;</code>定义上标文本</li><li><code>&lt;sub&gt;&lt;/sub&gt;</code> 定义下标文本 </li><li><code>&lt;hr&gt;</code>定义水平线</li><li><code>&lt;br&gt;</code>定义简单的换行</li></ul><p>常用的标签基本上就是这些了，有些标签在现在的网页开发中很少用或者是被弃用淘汰了，在新的HTML5中新增了很多的标签和属性，后期我会专门写一篇文章，本篇就到这里吧，如果哪里写的不好或者有错的话，请指正，我会及时修改！<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png?v8">👋</span> </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器介绍</title>
      <link href="/posts/6da42d6b.html"/>
      <url>/posts/6da42d6b.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-浏览器介绍"><a href="#1-浏览器介绍" class="headerlink" title="1. 浏览器介绍"></a>1. 浏览器介绍</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>  浏览器是指可以显示网页服务器或者文件系统的HTML文件（标准通用标记语言的一个应用）的内容，并让用户与这些文件交互的一种软件。它用来显示在万维网或局域网等内的文字、图像及其他信息。这些文字或图像，可以是连接其他网址的超链接，用户可迅速及轻易地浏览各种信息。大部分网页为HTML格式。</p><h3 id="1-2-常用浏览器"><a href="#1-2-常用浏览器" class="headerlink" title="1.2 常用浏览器"></a>1.2 常用浏览器</h3><p>  常用的浏览器有QQ浏览器、Internet Explorer浏览器、Mozilla Firefox浏览器、Google Chrome浏览器、Safari浏览器、Opera浏览器、UC浏览器、猎豹浏览器、搜狗浏览器、360浏览器等等。在前端开发中，常用的浏览器是Google Chrome浏览器和Mozilla Firefox浏览器，在功能调试方面，效率很高，而且它们有许多优秀的扩展插件，可以帮助开发者们更快的进行开发。</p><h3 id="1-3-浏览器市场份额"><a href="#1-3-浏览器市场份额" class="headerlink" title="1.3 浏览器市场份额"></a>1.3 浏览器市场份额</h3><p>  浏览器市场份额，其含义是哪种浏览器在市场上所占有的份额比重最大，使用量最多，我在网上查阅的资料，百度统计所调查的数据来看，谷歌浏览器的市场份额最大，大约占39.61%，Safari浏览器的市场份额最小，大约占5.5%，可能是因为国人大都使用的是Windows系统，国产电脑，其它浏览器的具体数据如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://raw.githubusercontent.com/Yafine/Yafine-imgs/master/images/browser1.png" alt="浏览器市场份额-电脑版数据调查显示"></p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/cdn@1.7/source/loading.gif" data-original="https://raw.githubusercontent.com/Yafine/Yafine-imgs/master/images/browser2.png" alt="浏览器市场份额-移动版数据调查显示"></p><h3 id="1-4-浏览器内核"><a href="#1-4-浏览器内核" class="headerlink" title="1.4 浏览器内核"></a>1.4 <a href="https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8" target="_blank" rel="noopener">浏览器内核</a></h3><p>  浏览器最重要或者说核心的部分是“Rendering Engine”，可大概译为“渲染引擎”，不过我们一般习惯将之称为“浏览器内核”。负责对网页语法的解释（如标准通用标记语言下的一个应用HTML、JavaScript）并渲染（显示）网页。 所以，通常所谓的浏览器内核也就是浏览器所采用的渲染引擎，渲染引擎决定了浏览器如何显示网页的内容以及页面的格式信息。不同的浏览器内核对网页编写语法的解释也有不同，因此同一网页在不同的内核的浏览器里的渲染（显示）效果也可能不同，这也是网页编写者需要在不同内核的浏览器中测试网页显示效果的原因。（PS: <font color="red">温馨提示：</font>面试笔试题也可能会考到，所以需要好好了解一下哦!）</p><h4 id="1-4-1-内核分类"><a href="#1-4-1-内核分类" class="headerlink" title="1.4.1 内核分类"></a>1.4.1 内核分类</h4><ul><li>Trident（也称IE内核）<br>  Trident(又叫MSHTML)，是微软开发的一种排版引擎。<br>  Trident内核的常见浏览器有：IE6、IE7、IE8（Trident 4.0）、IE9（Trident 5.0）、IE10（Trident 6.0）；360安全浏览器（1.0-5.0为Trident，6.0为Trident+Webkit，7.0为Trident+Blink）猎豹极轻浏览器，360极速浏览器（7.5之前为Trident+Webkit，7.5为Trident+Blink）猎豹安全浏览器（1.0-4.2版本为Trident+Webkit，4.3及以后版本为Trident+Blink）猎豹极轻浏览器，傲游浏览器（傲游1.x、2.x为IE内核，3.x为IE与Webkit双核）、百度浏览器（早期版本）、世界之窗浏览器（最初为IE内核，2013年采用Chrome+IE内核）、2345浏览器、腾讯TT、淘宝浏览器、采编读浏览器、搜狗高速浏览器（1.x为Trident，2.0及以后版本为Trident+Webkit）、阿云浏览器（早期版本）、瑞星安全浏览器、Slim Browser、 GreenBrowser、爱帆浏览器（12 之前版本）、115浏览器、155浏览器、闪游浏览器、N氧化碳浏览器、糖果浏览器、彩虹浏览器、瑞影浏览器、勇者无疆浏览器、114浏览器、蚂蚁浏览器、飞腾浏览器、速达浏览器、佐罗浏览器、海豚浏览器（iPhone/iPad/Android）、UC浏览器（Webkit内核+Trident内核）等。<br>  其中部分浏览器的新版本是“双核”甚至是“多核”，其中一个内核是Trident，然后再增加一个其他内核。国内的厂商一般把其他内核叫做“高速浏览模式”，而Trident则是“兼容浏览模式”，用户可以来回切换。<br>  Win10系统发布后，微软将将其IE内置浏览器命名为<a href="https://baike.baidu.com/item/Microsoft%20Edge/17511966?fr=aladdin" target="_blank" rel="noopener">Microsoft Edge浏览器</a>，2018年12月，微软正式确认，新的Edge浏览器将从EdgeHTML内核迁移为Chromium内核，同时还会登陆到Windows 7/8/8.1和macOS平台。</li><li>Webkit内核<br>  Webkit（Safari内核，Chrome内核原型，开源）:它是苹果公司自己的内核，也是苹果的Safari浏览器使用的内核。 Webkit引擎包含WebCore排版引擎及JavaScriptCore解析引擎，均是从KDE的KHTML及KJS引擎衍生而来，它们都是自由软件，在GPL条约下授权，同时支持BSD系统的开发。所以Webkit也是自由软件，同时开放源代码。在安全方面不受IE、Firefox的制约，所以Safari浏览器在国内还是很安全的。<br>  WebKit内核常见的浏览器：傲游浏览器3、Apple Safari （Win/Mac/iPhone/iPad）、Symbian手机浏览器、Android 默认浏览器</li><li>Blink内核<br>  Blink是一个由Google和Opera Software开发的浏览器排版引擎，Google计划将这个渲染引擎作为Chromium计划的一部分，并且在2013年4月的时候公布了这一消息。这一渲染引擎是开源引擎WebKit中WebCore组件的一个分支，并且在Chrome（28及往后版本）、Opera（15及往后版本）和Yandex浏览器中使用。</li><li>Gecko内核<br>  Gecko（Firefox内核）：Netscape6开始采用的内核，后来的Mozilla FireFox（火狐浏览器） 也采用了该内核，Gecko的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。因为这是个开源内核，因此受到许多人的青睐，Gecko内核的浏览器也很多，这也是Gecko内核虽然年轻但市场占有率能够迅速提高的重要原因。<br>  Gecko内核常见的浏览器：Mozilla Firefox、Mozilla SeaMonkey、waterfox（Firefox的64位开源版）、Iceweasel、Epiphany（早期版本）、Flock（早期版本）、K-Meleon。</li><li>Presto内核<br>  这是一个动态内核，与前面几个内核的最大的区别就在脚本处理上，Presto有着天生的优势，页面的全部或者部分都能够在回应脚本事件时等情况下被重新解析。此外该内核在执行Javascrīpt的时候有着最快的速度，根据在同等条件下的测试，Presto内核执行同等Javascrīpt所需的时间仅有Trident和Gecko内核的约1/3（Trident内核最慢，不过两者相差没有多大），本文的其中一个修改者认为上述测试信息过于老旧且不完整，因为他曾做过的小测试显示Presto部分快部分慢，各内核总体相当。那次测试的时候因为Apple机的硬件条件和普通PC机不同所以没有测试WebCore内核。只可惜Presto是商业引擎，使用Presto的除开Opera以外，只剩下NDSBrowser、Wii Internet Channle、Nokia 770网络浏览器等，这很大程度上限制了Presto的发展。<br>  Opera现已改用Google Chrome的Blink内核。</li></ul><h4 id="1-4-2-浏览器使用的内核"><a href="#1-4-2-浏览器使用的内核" class="headerlink" title="1.4.2 浏览器使用的内核"></a>1.4.2 浏览器使用的内核</h4><ul><li>IE浏览器内核：Trident内核，也是俗称的IE内核；</li><li>Chrome浏览器内核：统称为Chromium内核或Chrome内核，以前是Webkit内核，现在是Blink内核；</li><li>Firefox浏览器内核：Gecko内核，俗称Firefox内核； </li><li>Safari浏览器内核：Webkit内核； </li><li>Opera浏览器内核：最初是自己的Presto内核，后来是Webkit，现在是Blink内核； </li><li>360浏览器、猎豹浏览器内核：IE+Chrome双内核； </li><li>搜狗、遨游、QQ浏览器内核：Trident（兼容模式）+Webkit（高速模式）； </li><li>百度浏览器、世界之窗内核：IE内核； </li><li>2345浏览器内核：以前是IE内核，现在也是IE+Chrome双内核；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 浏览器知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发工具的选择</title>
      <link href="/posts/10d0c9f1.html"/>
      <url>/posts/10d0c9f1.html</url>
      
        <content type="html"><![CDATA[<h5 id="正所谓“工欲善其事，必先利其器”，对Web开发人员来说，好工具的使用总会给人带来事半功倍的效果。"><a href="#正所谓“工欲善其事，必先利其器”，对Web开发人员来说，好工具的使用总会给人带来事半功倍的效果。" class="headerlink" title="正所谓“工欲善其事，必先利其器”，对Web开发人员来说，好工具的使用总会给人带来事半功倍的效果。"></a><strong>正所谓“工欲善其事，必先利其器”，对Web开发人员来说，好工具的使用总会给人带来事半功倍的效果。</strong></h5><p>  下面来说一下几种常用的开发工具：</p><ul><li><span style="font-weight:bold;"><a href="http://www.dcloud.io/" target="_blank" rel="noopener" title="HBuilder官网">HBuilder</a></span></li><li><span style="font-weight:bold;"><a href="https://atom.io/" target="_blank" rel="noopener" title="Atom官网">Atom</a></span></li><li><span style="font-weight:bold;"><a href="https://www.sublimetext.com/" target="_blank" rel="noopener" title="Sublime Text官网">Sublime Text</a></span></li><li><span style="font-weight:bold;"><a href="https://code.visualstudio.com/" target="_blank" rel="noopener" title="Visual Studio Code官网">Visual Studio Code</a></span></li></ul><p>  如果是初学者的话，我建议先使用HBuilder（记事本也可以，不过需要你将元素标签属性记牢固），很容易上手，熟练后在使用Visual Studio Code或者是Atom，这两个开发工具功能很强大，支持多种插件的安装，比如C/C++、Python、Java等等。</p><p>  当下，有三种主流的编辑器，分别为Visual Studio Code、Sublime Text和Atom，下面简单的说一说它们各自的优缺点：</p><h3 id="Atom的优缺点"><a href="#Atom的优缺点" class="headerlink" title="Atom的优缺点"></a>Atom的优缺点</h3><p>  首先我们来说一说Atom，Atom代码编辑器支持Windows、MaC、Linux三大桌面平台，完全免费，并且在GitHub上开放了全部的源代码。具有简洁和直观的图形用户界面，它支持宏，自动完成分屏功能，集成了文件管理器。经过开发团队的长时间的迭代开发和不断改进，Atom正式版编辑器在性能和稳定性都有着显著的改善。</p><p><strong>主要优点：</strong></p><ol><li>开发维护团队强大，而且是开源项目，因此修复bug速度快，生态圈成长速度快。</li><li>快捷键支持特别好，熟悉了各种快捷键后可以成吨提高生成效率。</li><li>比较稳定，很少出现崩溃。</li><li>插件管理很到位，能准确定位出问题的插件。git原生支持。</li><li>插件的生态圈发展速度特别快，一大堆好用的插件等着用户去探索。</li></ol><p><strong>主要缺点：</strong></p><ol><li>性能问题，启动速度很慢。</li><li>打开大文件时会出现CPU占用过高的问题。</li><li>目前相比于Sublime技术层面还不够成熟，有不少bug。</li></ol><h3 id="Sublime-Text的优缺点"><a href="#Sublime-Text的优缺点" class="headerlink" title="Sublime Text的优缺点"></a>Sublime Text的优缺点</h3><p>  我们再来说一说这个Sublime Text编辑器。它也是一个代码编辑器，也是HTML和散文先进的文本编辑器，目前最新的版本为V3.2.1,不过这个编辑器是一个收费软件，但可以无限期试用，但是会不定时的弹出付费提醒。Sublime Text是由程序员Jon Skinner于2008年1月份所开发出来，它最初被设计为一个具有丰富扩展功能的Vim。</p><p>  Sublime Text具有漂亮的用户界面和强大的功能，例如代码缩略图，Python的插件，代码段等。还可自定义键绑定，菜单和工具栏。Sublime Text 的主要功能包括：拼写检查，书签，完整的 Python API ， Goto 功能，即时项目切换，多选择，多窗口等等。Sublime Text 是一个跨平台的编辑器，同时支持Windows、Linux、Mac OS X等操作系统。</p><p><strong>主要优点：</strong></p><ol><li>主流前端开发编辑器。</li><li>体积较小，运行速度快。</li><li>文本功能强大。</li><li>支持编译功能且可在控制台看到输出</li><li>内嵌python解释器支持插件开发以达到可扩展的目的</li><li>Package Control：ST支持的大量插件可通过其进行管理</li></ol><p><strong>主要缺点：</strong></p><ol><li>收费闭源，收费的问题虽然不影响使用，但是闭源带来的问题就是一个bug千年都不见修复，很影响使用。</li><li>虽然启动运行快，但当打开xcode运行着项目的同时去使用Sublime，你就知道什么是崩溃了，输入一行代码，半天还反应不过来（这个问题仅仅存在于Sublime Text3）。</li><li>虽然有Package Control管理插件，但是安装搜索插件时，只能看见一句话对插件进行简单的描述，而且之后的插件配置也不方便。</li><li>当插件安装的比较多的时候，Sublime会时不时的崩溃，用户也不能清晰的知道是哪个插件引起的，只能一个个的卸载进行判断，很麻烦。</li><li>很多插件在Sublime Text3和Sublime Text2上不兼容，很多Sublime Text2上的好用插件，在Sublime Text3上不能使用。</li><li>Sublime Text2没有新建窗口的问题，要同时打开不同的项目，很不方便。</li><li>吐槽一下Sublime Text的project功能，ctrl+command+p只能切换最近打开过的project，即使你保存在了Sublime Project，只要最近没有打开过，这个快捷方式就不能切换。</li></ol><h3 id="VScode的优缺点"><a href="#VScode的优缺点" class="headerlink" title="VScode的优缺点"></a>VScode的优缺点</h3><p>  最后我们说一说Visual Studio Code，vscode同样也是一个轻量级但功能强大的跨平台的文本编辑器，可在桌面运行，适用于Windows，MACOS，和Linux平台。它内置了对JavaScript，TypeScript和Node.js的支持，并且具有丰富的其他语言（如C++，C#，Java，Python，PHP，Go）和运行时（如.NET和Unity）的扩展生态系统。可以参考<a href="https://code.visualstudio.com/docs/" target="_blank" rel="noopener" title="vscode文档">vscode文档</a>。</p><p><strong>主要优点：</strong></p><ol><li>好看，分分钟逼死Notepad++，直接卸载Notepad++。</li><li>加载大文件几乎秒开，试过打开100M的工程，无压力。</li><li>C#支持高亮，已经编译过的还支持引用。</li><li>JS，HTML等支持高亮补全。</li><li>全平台</li><li>免费，这是必须的好评。</li><li>占用内存低。</li><li>基于atom，但是性能秒速atom。</li></ol><p><strong>主要缺点：</strong></p><ol><li>还不够稳定，经常会崩溃，要不是经常崩溃，绝对使用它了。</li><li>插件还不是很完善，但是发展速度相当快。</li><li>debug的灵活性还不够。</li><li>对C#的支持还不够好。</li><li>不支持工程加载，只支持文件夹加载，引用比较复杂的大工程支持力度低。</li></ol><p><strong>总结：</strong><br>  这三个编辑器，各有所长，也各有自己的不足，针对不同的开发人员，可能需要根据自己的喜好来选择，不过幸运的是，这三个编辑器的使用方式大同小异，基本上可以无痛的迁移到任何一个编辑器上。<br>  从长远发展的角度来讲，Atom和vscode是由两大巨头维护主推的开源项目，开源的力量是巨大的，因此其发展速度注定会远超过Sublime。<br>  学习前端最重要的还是坚持努力，在学习的过程当中，也要提高自己的编程能力，如果遇到不会的，上网查阅资料，或者虚心请教比较资深的大佬。加油吧，骚年！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客开始上线</title>
      <link href="/posts/1aa5f497.html"/>
      <url>/posts/1aa5f497.html</url>
      
        <content type="html"><![CDATA[<p>  之前也整过Hexo的其他博客主题，像hexo-theme-sakura樱花主题，hexo-theme-butterfly主题，hexo-theme-Annie等主题，这个hexo-theme-Matery之前也用过一次，那时有些地方觉得不太好看，就换主题了。前几天又看到了这个主题，开发者进行了更新美化，使用起来效果很好，于是就开始部署这个主题的博客，内容还没有开始发布，后期我会陆续不定期更新博客内容，博客主要内容是记录学习笔记的，方便日后复习。当然也不排除发布其它的内容，像资源分享，心情笔记等。博客内容如若有错误的话请指出，我会及时修改的！谢谢支持！</p><h4 id="就先这样了！"><a href="#就先这样了！" class="headerlink" title="就先这样了！"></a>就先这样了！</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
